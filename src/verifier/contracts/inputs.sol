// SPDX-License-Identifier: MIT
pragma solidity >=0.4.22 <0.9.0;

contract Inputs {

    uint256[21] public Proof = [
        uint256(11429008309605675341474472839593328920164544267724272334121107847312021466064),
        uint256(1995278733733848960923564237539070069254135250975328135502116388585338415899),
        uint256(231014479782015245234485944771714376129960099757713828634132041508962534993),
        uint256(15099064614159299663080487230823884942440586700446010397106703856370686471325),
        uint256(10911997731943274075869643439668756489125664959295695247107153863972726390087),
        uint256(8883079956021269520428603707470829554074757399727352418163991564550343453845),
        uint256(18035988637373634897813334457659675867857155183095772793648129696306193028590),
        uint256(16106045002637522303515065401446966073189094759800456173123420884661299735056),
        uint256(3395147172402996337127237802390080576649516904409990366501292023972732439618),
        uint256(3216241709340850247887812240887513398315065222763209655088170620298484084270),
        uint256(5344235764667976573804119075468512078380817144293812494152834200451543203720),
        uint256(11501677510243432580355494980184601957333547180901976934693433478320536872448),
        uint256(4545226728140336400007326889217882301142998034712508393204890995438657873603),
        uint256(20052702838233732382145143347915728376062577136068410877768062154133156784293),
        uint256(5369649984321766319810459110150505225411686904825830737804470888594616128296),
        uint256(10099688445141971330510835267769948351805605014762733420275714706855351916254),
        uint256(9252056708215315779973983307609880284826912473241320509761120579995104140139),
        uint256(20669044099392548957549197632043998464498873532477270874006425670248878742857),
        uint256(11572856712932036104612742963749221319836005439756413618067030561227578707928),
        uint256(5591634052202194491140830090042291462209385675293115589289831521643597203812),
        uint256(10012364878445126637403116614853075154766367145189767023725638490267012049899)
    ];

    uint256[2] public randoms = [
        uint256(20635269287353674939661816788107042311729024848913504192248510833205786040988),
        uint256(14630258091650071609679859836448958603357520035730789644563591436908376524970)
    ];

    bytes32 message = ethMessageHash("231014479782015245234485944771714376129960099757713828634132041508962534993, 15099064614159299663080487230823884942440586700446010397106703856370686471325");
    bytes sig = hex"37b78360ec9a23d0063480940ae6273f31cfdeef8cda68dc391b204da0ab163f20cd2ab84a4b3d7d5dbd5a76e6da4d397c65db1573aede042b4fecc05433a40f01";
    address addr = 0xe350875eC3EA8Bb18c7034A53B776D015d97D871;

    uint256 evalK = uint256(8139029593433211937598298729972982837137631016553503507131477490874965030342);
    uint256 evalS = Proof[20];

    /**
    * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:" and hash the result
    */
    function ethMessageHash(string memory message) internal pure returns (bytes32) {
        return keccak256(
            abi.encodePacked("\x19Ethereum Signed Message:\n32", keccak256(abi.encodePacked(message)))
        );
    }

}